<?php

namespace app\api\controller;

use app\api\enum\Order;
use app\api\enum\Imap;
use app\api\service\Usdt;
use app\common\controller\Controller;
use app\common\enum\Bot;
use app\common\enum\RedisKey;
use app\common\helper\TgHelper;
use app\common\model\Transactions;
use app\common\model\Users;
use app\common\service\UserBalance;
use think\Db;
use think\facade\Cache;
use think\facade\Log;

class Notify extends Controller
{
    protected $params = [];
    protected $data = [];

    /**
     * Initialize method for Takeout App
     */
    public function initialize()
    {
        $this->params = request()->get();
        $this->data = request()->param();
    }

    public function payReturn()
    {
        echo '<!DOCTYPE html><html lang="en"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"><title>Payment Status</title><style>*{box-sizing:border-box}body{font-family:ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,"Noto Sans",sans-serif;background:hsl(0 0% 3.9%);margin:0;padding:0;display:flex;justify-content:center;align-items:center;min-height:100vh;color:hsl(0 0% 98%);-webkit-tap-highlight-color:transparent;font-size:16px}@media(max-width:640px){body{font-size:14px}}.container{background:hsl(0 0% 9%);border:1px solid hsl(0 0% 14.9%);border-radius:12px;width:95%;max-width:400px;padding:40px 20px;text-align:center;margin:20px;box-shadow:0 10px 15px -3px rgba(0,0,0,0.1),0 4px 6px -2px rgba(0,0,0,0.05)}@media(max-width:640px){.container{width:90%;padding:32px 16px;margin:16px}}.spinner{display:inline-block;width:32px;height:32px;margin:0 auto 32px}@media(max-width:640px){.spinner{width:28px;height:28px;margin:0 auto 28px}}.spinner:after{content:"";display:block;width:28px;height:28px;margin:2px;border-radius:50%;border:3px solid hsl(0 0% 98%);border-color:hsl(0 0% 98%) transparent hsl(0 0% 98%) transparent;animation:spin 1.2s linear infinite}@media(max-width:640px){.spinner:after{width:24px;height:24px;border-width:2px}}@keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}h1{font-size:28px;font-weight:600;margin:0 0 20px 0;color:hsl(0 0% 98%);letter-spacing:-0.025em}@media(max-width:640px){h1{font-size:24px;margin:0 0 16px 0}}p{font-size:18px;line-height:1.5;color:hsl(0 0% 63.9%);margin:0}@media(max-width:640px){p{font-size:16px}}</style></head><body><div class="container"><div class="spinner"></div><h1>Checking Payment</h1><p>If you have already paid, please close this page</p></div></body></html>';
    }

    public function dfpayNotify()
    {
        $paymentNo = $this->data['mchOrderNo'];
        $lock = Cache::store('redis')->setNx(sprintf(RedisKey::PAY_PROCESSING, $paymentNo), '1');
        if (!$lock) {
            return $this->error('payment order is being processed');
        }
        try {
            if ($this->data['state'] != 2) {
                return $this->error('payment order is not successful');
            }
            // Êü•ËØ¢ËÆ¢Âçï‰ø°ÊÅØ
            $order = Transactions::where('order_no', $paymentNo)
                ->field('id,status,order_no,user_id,amount,gift')
                ->find();

            if (!$order) {
                log_data('dfpay-notify', "dfPayÂõûË∞ÉËÆ¢Âçï‰∏çÂ≠òÂú®: {$paymentNo}");
                throw new \Exception('ËÆ¢Âçï‰∏çÂ≠òÂú®');
            }

            // Ê£ÄÊü•ËÆ¢ÂçïÁä∂ÊÄÅÔºåÈò≤Ê≠¢ÈáçÂ§çÂõûË∞É
            if ($order->status == 'completed') {
                log_data('dfpay-notify', "dfPayÂõûË∞ÉËÆ¢ÂçïÂ∑≤ÂÆåÊàê: {$paymentNo}");
                throw new \Exception('ËÆ¢ÂçïÂ∑≤ÂõûË∞É');
            }

            // ÂºÄÂßãÊï∞ÊçÆÂ∫ì‰∫ãÂä°
            Db::startTrans();
            try {
                // Êõ¥Êñ∞ËÆ¢ÂçïÁä∂ÊÄÅ
                $order->status = 'completed';
                $order->completed_at = date('Y-m-d H:i:s');
                $order->save();

                // Â¢ûÂä†Áî®Êà∑‰ΩôÈ¢ù
                if ($order->amount > 0) {
                    UserBalance::addUserBalance($order->user_id, $order->amount, 'deposit', "Cashapp Online Deposit Success, Order No: {$paymentNo}, Amount: {$order->amount}", $order->id);
                }

                // Â§ÑÁêÜËµ†ÈÄÅÈáëÈ¢ù
                if (isset($order->gift) && $order->gift > 0) {
                    UserBalance::addUserBalance($order->user_id, $order->gift, 'gift', "Cashapp Online Deposit Gift, Order No: {$paymentNo}, Gift Amount: {$order->gift}", $order->id);
                }

                Db::commit();
                TgHelper::sendMessage(Bot::PAYMENT_BOT_TOKEN, Bot::FINANCE_CHAT_ID, sprintf("Áî®Êà∑ÂÖÖÂÄºÊàêÂäü\nüíµÈáëÈ¢ù: %s", $order->amount));
                log_data('dfpay-notify', "Cashapp Online Deposit Success: Áî®Êà∑ID={$order->user_id}, ËÆ¢ÂçïÂè∑={$paymentNo}, ÈáëÈ¢ù={$order->amount}");
            } catch (\Exception $e) {
                Db::rollback();
                log_data('dfpay-notify', "Cashapp Online Deposit Failed: {$e->getMessage()}");
                return $this->error('ÂÖÖÂÄºÂ§ÑÁêÜÂ§±Ë¥•: ' . $e->getMessage(), 500);
            }
        } catch (\Exception $e) {
            $this->error($e->getMessage());
        } finally {
            Cache::store('redis')->del(sprintf(RedisKey::PAY_PROCESSING, $paymentNo));
        }
        echo 'success';
    }


    public function freePayNotify()
    {
        try {
            log_data('freepay-notify', 'freePayÈÄöÁü•ÂºÄÂßã');
            log_data('freepay-notify', 'ËØ∑Ê±ÇÂèÇÊï∞: ' . json_encode(request()->param()));
            log_data('freepay-notify', 'POSTÊï∞ÊçÆ: ' . json_encode(request()->post()));

            // Ëé∑ÂèñËØ∑Ê±ÇÂèÇÊï∞
            $params = request()->param();
            $mchOrderNo = $params['mchOrderNo'] ?? '';
            $state = $params['state'] ?? '';
            $amount = $params['amount'] ?? '';
            $currency = $params['currency'] ?? '';
            $platOrderNo = $params['platOrderNo'] ?? '';

            // ÂèÇÊï∞È™åËØÅ
            if (empty($mchOrderNo) || empty($state) || empty($amount) || empty($currency)) {
                log_data('freepay-notify', 'freePayÂõûË∞ÉÂèÇÊï∞ÈîôËØØ: ' . json_encode($params));
                return $this->error('ÂèÇÊï∞ÈîôËØØ', 400);
            }

            // ‰ΩøÁî®RedisÈîÅÈò≤Ê≠¢Âπ∂ÂèëÂ§ÑÁêÜ
            $lockKey = sprintf(RedisKey::PAY_PROCESSING, $mchOrderNo);
            $lockValue = uniqid();
            $lockTtl = 30; // 30ÁßíÈîÅÂÆöÊó∂Èó¥

            // Â∞ùËØïËé∑ÂèñÈîÅ
            if (!Cache::store('redis')->set($lockKey, $lockValue, $lockTtl, ['nx'])) {
                log_data('freepay-notify', "freePayÂõûË∞ÉÊ≠£Âú®Â§ÑÁêÜ‰∏≠ÔºåËÆ¢ÂçïÂè∑: {$mchOrderNo}");
                return $this->error('ËÆ¢ÂçïÊ≠£Âú®Â§ÑÁêÜ‰∏≠', 423);
            }

            try {
                // Âè™Â§ÑÁêÜÊàêÂäüÁä∂ÊÄÅÁöÑÂõûË∞É
                if ($state == "2") {
                    // Êü•ËØ¢ËÆ¢Âçï‰ø°ÊÅØ
                    $order = Transactions::where('order_no', $mchOrderNo)
                        ->field('id,status,order_no,user_id,amount,gift')
                        ->find();

                    if (!$order) {
                        log_data('freepay-notify', "freePayÂõûË∞ÉËÆ¢Âçï‰∏çÂ≠òÂú®: {$mchOrderNo}");
                        throw new \Exception('ËÆ¢Âçï‰∏çÂ≠òÂú®');
                    }

                    // Ê£ÄÊü•ËÆ¢ÂçïÁä∂ÊÄÅÔºåÈò≤Ê≠¢ÈáçÂ§çÂõûË∞É
                    if ($order->status == 'completed') {
                        log_data('freepay-notify', "freePayÂõûË∞ÉËÆ¢ÂçïÂ∑≤ÂÆåÊàê: {$mchOrderNo}");
                        throw new \Exception('ËÆ¢ÂçïÂ∑≤ÂõûË∞É');
                    }

                    // È™åËØÅÂπ≥Âè∞ËÆ¢ÂçïÂè∑ÔºàÂ¶ÇÊûúÊúâÁöÑËØùÔºâ
                    if (!empty($platOrderNo) && isset($order->platform_order_no) && $order->platform_order_no != $platOrderNo) {
                        log_data('freepay-notify', "freePayÂõûË∞ÉËÆ¢ÂçïÂè∑‰∏çÂåπÈÖç: ÂïÜÊà∑ËÆ¢ÂçïÂè∑={$mchOrderNo}, Âπ≥Âè∞ËÆ¢ÂçïÂè∑={$platOrderNo}");
                        throw new \Exception('ËÆ¢ÂçïÂè∑‰∏çÁ¨¶Âá∫Èîô');
                    }

                    // ÂºÄÂßãÊï∞ÊçÆÂ∫ì‰∫ãÂä°
                    Db::startTrans();
                    try {
                        // Êõ¥Êñ∞ËÆ¢ÂçïÁä∂ÊÄÅ
                        $order->status = 'completed';
                        $order->completed_at = date('Y-m-d H:i:s');
                        $order->save();

                        // Â¢ûÂä†Áî®Êà∑‰ΩôÈ¢ù
                        if ($order->amount > 0) {
                            UserBalance::addUserBalance($order->user_id, $order->amount, 'deposit', "Usdc Online Deposit Success, Order No: {$mchOrderNo}, Amount: {$order->amount}", $order->id);
                        }

                        // Â§ÑÁêÜËµ†ÈÄÅÈáëÈ¢ù
                        if (isset($order->gift) && $order->gift > 0) {
                            UserBalance::addUserBalance($order->user_id, $order->gift, 'gift', "Usdc Online Deposit Gift, Order No: {$mchOrderNo}, Gift Amount: {$order->gift}", $order->id);
                        }

                        Db::commit();
                        TgHelper::sendMessage(Bot::PAYMENT_BOT_TOKEN, Bot::FINANCE_CHAT_ID, sprintf("Áî®Êà∑ÂÖÖÂÄºÊàêÂäü\nüíµÈáëÈ¢ù: %s", $order->amount));
                        log_data('freepay-notify', "freePayÂÖÖÂÄºÊàêÂäü: Áî®Êà∑ID={$order->user_id}, ËÆ¢ÂçïÂè∑={$mchOrderNo}, ÈáëÈ¢ù={$order->amount}");
                    } catch (\Exception $e) {
                        Db::rollback();
                        log_data('freepay-notify', "freePayÂÖÖÂÄºÂ§ÑÁêÜÂ§±Ë¥•: {$e->getMessage()}");
                        return $this->error('ÂÖÖÂÄºÂ§ÑÁêÜÂ§±Ë¥•: ' . $e->getMessage(), 500);
                    }
                } else {
                    log_data('freepay-notify', "freePayÂõûË∞ÉÁä∂ÊÄÅÈùûÊàêÂäü: ËÆ¢ÂçïÂè∑={$mchOrderNo}, Áä∂ÊÄÅ={$state}");
                    return $this->success('Â∑≤Êé•Êî∂');
                }
            } finally {
                // ÈáäÊîæÈîÅ
                $script = "
                    if redis.call('get', KEYS[1]) == ARGV[1] then
                        return redis.call('del', KEYS[1])
                    else
                        return 0
                    end
                ";
                Cache::store('redis')->eval($script, [$lockKey, $lockValue], 1);
            }
        } catch (\Exception $e) {
            log_data('freepay-notify', 'freePayÂõûË∞ÉÂ§ÑÁêÜÂºÇÂ∏∏: ' . $e->getMessage());
            return $this->error('Á≥ªÁªüÂºÇÂ∏∏', 500);
        }
        echo 'ok';
    }

    public function longWithdraw()
    {
        log_data('long', $this->data);
        $orderNo = $this->data['orderId'];
        $status = $this->data['status'];
        $lock = Cache::store('redis')->setNx(sprintf(RedisKey::PAY_PROCESSING, $orderNo), '1');
        if (!$lock) {
            return $this->error('withdraw order is being processed');
        }
        $transaction = Transactions::where('order_no', $orderNo)->find();
        if (!$transaction) {
            return $this->error('order not found');
        }
        if ($status == 'INVALID' && $transaction->status == 'completed') {
            $transaction->status = 'failed';
            $transaction->remark = 'invalid cash tag';
            $transaction->save();
            UserBalance::refundWithdraw($transaction);
            $user = Users::where('id', $transaction->user_id)->field('username,id')->find();
            TgHelper::sendMessage(Bot::PAYMENT_BOT_TOKEN, Bot::FINANCE_CHAT_ID, sprintf("‚ö†Ô∏ècashappÊèêÁé∞ÊâìÊ¨æÂ§±Ë¥•\nüíµÈáëÈ¢ù: %s\nüë§Áî®Êà∑: %s", $transaction->amount, $user->username));
        }
        echo 'success';
    }
}
